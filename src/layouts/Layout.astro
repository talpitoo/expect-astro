---
import "../styles/global.css";
import Hero from "../components/Hero.astro";
import Meta from "../components/Meta.astro";
import ScriptGA from "../components/ScriptGA.astro";
import Footer from "../components/Footer.astro";
---

<!doctype html>
<html lang="en">
  <head prefix="og: http://ogp.me/ns#">
    <Meta />
  </head>
  <!-- TODO: check itemptype for other pages -->
  <body itemscope itemtype="http://schema.org/WebPage">
    <div id="smooth-content">
      <noscript>
        <div style="color: #8B7D4A; background-color: #FAFBF8; padding: 10px;">
          ⚠️ <strong>Warning!</strong> For a better experience, enable JavaScript
          in your browser.
        </div>
      </noscript>
      <!--[if lt IE 11]>
            <div style="color: #8B7D4A; background-color: #FAFBF8; padding: 10px;">
              ⚠️ <strong>Warning!</strong> You are using an <strong style="text-decoration: underline;  text-underline-offset: 2px; text-decoration-thickness: 2px;">outdated</strong> browser. Please <strong><a href="https://browsehappy.com/">upgrade your browser</a></strong> to improve your experience.
            </div>
        <![endif]-->
      <ScriptGA />

      <Hero />
      <main>
        <slot />
      </main>
      <Footer />
    </div>

    <script>
      // https://gsap.com/docs/v3/Plugins/ScrollSmoother/
      import { gsap } from "gsap";
      import { ScrollTrigger } from "gsap/ScrollTrigger";
      import { ScrollSmoother } from "gsap/ScrollSmoother";
      import { DrawSVGPlugin } from "gsap/DrawSVGPlugin";

      // Register plugins globally
      gsap.registerPlugin(ScrollTrigger, ScrollSmoother, DrawSVGPlugin);

      // prefers-reduced-motion support
      let reduceMotionCB = document.querySelector("#reducedMotionToggle");
      reduceMotionCB.checked = window.matchMedia(
        "(prefers-reduced-motion: reduce)"
      ).matches;

      // Function to update HTML class based on checkbox state
      function updateReducedMotionClass() {
        const html = document.documentElement;
        if (reduceMotionCB.checked) {
          html.classList.add('prefers-reduced-motion');
        } else {
          html.classList.remove('prefers-reduced-motion');
        }
      }

      // Set initial class state
      updateReducedMotionClass();

      // Update class when checkbox changes, then refresh GSAP matchMedia
      reduceMotionCB.addEventListener("change", function() {
        updateReducedMotionClass();
        gsap.matchMediaRefresh(); // force all matchMedia() stuff to revert and re-run
      });

      let gsapMatchMedia = gsap.matchMedia();

      // Make GSAP available globally
      (window as any).gsap = gsap;
      (window as any).ScrollTrigger = ScrollTrigger;
      (window as any).ScrollSmoother = ScrollSmoother;
      (window as any).DrawSVGPlugin = DrawSVGPlugin;
      (window as any).gsapMatchMedia = gsapMatchMedia;
      (window as any).reduceMotionCB = reduceMotionCB;

      gsapMatchMedia.add(
        {
          prefersReducedMotion: `(prefers-reduced-motion: reduce)`, // <- when ANY of these are true, the function below gets invoked
          noPreference: `(prefers-reduced-motion: no-preference)`
        },
        (context) => {
          let { noPreference, prefersReducedMotion } = context.conditions;
          let reduceMotion = reduceMotionCB.checked; // if we weren't using a checkbox, we could just add another condition above: "(prefers-reduced-motion: reduce)"

          // Initialize ScrollSmoother only if reduced motion is not preferred
          if (!reduceMotion && noPreference) {
            const smoother = ScrollSmoother.create({
              content: "#smooth-content",
              smooth: 2,
              // normalizeScroll: true, // NOTE: causes 'pull to refresh' to not work on mobile
              ignoreMobileResize: true,
              effects: true,
            });

            // smooth scroll to anchor links
            gsap.utils.toArray("[data-href-anchor]").forEach(function (button, i) {
              button.addEventListener("click", (e) => {
                e.preventDefault();
                var id = e.target.getAttribute("href");
                console.debug(id);
                smoother.scrollTo(id, true, "top top");
              });
            });

            // Add scroll snap to #intermission section
            // let snapTimeout: any;
            // ScrollTrigger.create({
            //   trigger: "#intermission",
            //   start: "top bottom-=100",
            //   end: "top top+100", 
            //   onUpdate: (self) => {
            //     clearTimeout(snapTimeout);
            //     snapTimeout = setTimeout(() => {
            //       const intermission = document.getElementById("intermission");
            //       if (intermission) {
            //         const rect = intermission.getBoundingClientRect();
            //         // If close to top (within 100px), snap to exact top
            //         if (Math.abs(rect.top) < 100) {
            //           smoother.scrollTo("#intermission", true, "top top");
            //           console.debug("Snapped to #intermission");
            //         }
            //       }
            //     }, 150); // Delay to avoid constant snapping during scroll
            //   },
            //   markers: true
            // });

            console.debug('GSAP ScrollSmoother was initiated.');
          } else {
            console.debug('prefers-reduced-motion (for GSAP ScrollSmoother)');
          }

          // optionally return a cleanup function
          // return () => console.debug("cleanup");
        }
      );

      // Dispatch ready event for components
      document.dispatchEvent(new CustomEvent("gsap:ready"));
    </script>
  </body>
</html>
