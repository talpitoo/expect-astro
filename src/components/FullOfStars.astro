<section class="relative overflow-hidden" id="stars">
  <div
    class="moon-surface absolute inset-0 bg-[url('../img/moon-surface.webp?ver=28082025')] bg-bottom bg-no-repeat bg-[length:100%_auto] max-md:bg-[length:140%_auto] 2xl:bg-[center_300px]"
  >
    <!-- data-parallax-factor="5" data-parallax-factor-y="2" parallax-layer -->
  </div>

  <div class="container-bootstrap relative">
    <div class="grid md:grid-cols-12 -mx-[15px]">
      <div class="md:col-span-10 md:col-start-2 px-[15px]">
        <h2
          class="font-serif font-light leading-[1.1] mb-6 uppercase text-[46px] pe-10 sm:pe-0"
        >
          It's full of stars
        </h2>
        <p class="mb-3  pe-10 sm:pe-0">
          Expect extraordinary taste, subtle details and sophisticated code.<br
          />
          <a href="#monolith" class="text-primary">Expect the unexpected.</a>
        </p>

        <a
          id="monolith"
          class="monolith-container parallax-layer block text-primary focus-visible:outline-0"
          data-parallax-factor="111"
          href="https://www.youtube.com/watch?v=ou6JNQwPWE0"
          rel="noopener noreferrer"
        >
          <div class="monolith show-front">
            <figure class="front bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure class="back bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure class="right bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure class="left bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure class="top bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure
              class="bottom bg-primary/50 block absolute outline-offset-0"
            >
            </figure>
          </div>
          <span class="sr-only">Monolith</span>
        </a>

        <div class="moonlanders -mb-px">
          <img
            src="img/moonlanders.webp?ver=28082025"
            alt="Moonlanders"
            width="525"
            height="300"
            loading="lazy"
            class="absolute inset-0 w-full h-full object-bottom object-contain"
          />
          <!-- data-parallax-factor="25" data-parallax-factor-y="15" parallax-layer -->
        </div>
      </div>
    </div>
  </div>

  <div
    class="flex items-center gap-2.5 opacity-50 absolute top-7 right-10 rotate-270 origin-top-right"
  >
    <input
      type="checkbox"
      id="reducedMotionToggle"
      class="accent-primary rotate-90 focus-visible:outline-white focus-visible:outline-dashed focus-visible:outline-2 focus-visible:outline-offset-2"
      name="reducedMotionToggle"
      value="false"
    />
    <label for="reducedMotionToggle" class="text-sm font-mono"
      >prefers-reduced-motion</label
    >
  </div>
</section>

<style>
  /* Parallax targets */
  .parallax-layer {
    will-change: transform;
    backface-visibility: hidden;
    transform: translate3d(0, 0, 0);
  }

  .moonlanders {
    width: 525px;
    height: 300px;
    position: absolute;
    bottom: -100px;
    right: 110px;
    z-index: 99;
    transform: translateZ(0);
    backface-visibility: hidden;
  }

  @media (min-width: 1200px) {
    .moonlanders {
      right: 130px;
    }
  }

  @media (min-width: 768px) and (max-width: 991px) {
    .moonlanders {
      right: 70px;
    }
  }

  @media (max-width: 767px) {
    .moonlanders {
      bottom: -40px;
      height: 200px;
      right: 50px;
      width: 350px;
    }
  }

  @media (max-width: 480px) {
    .moonlanders {
      bottom: -40px;
      height: 150px;
      right: 30px;
      width: 263px;
    }
  }

  /* monolith */
  .monolith-container {
    width: 120px;
    height: 270px;
    position: relative;
    perspective: 500px;
    margin-top: 50px;
  }

  .monolith {
    will-change: transform;
    animation: spinX 30s infinite linear;
    position: absolute;
    transform-style: preserve-3d;
    transition: transform 1s ease 0s;
    width: 100%;
    height: 100%;

    figure {
      backface-visibility: hidden;
      will-change: transform;
    }

    .front,
    .back {
      height: 270px;
      width: 120px;
    }

    .right,
    .left {
      height: 270px;
      left: 45px;
      width: 30px;
    }

    .top,
    .bottom {
      height: 30px;
      top: 120px;
      width: 120px;
    }

    .front {
      transform: rotateX(0deg) translateZ(15px);
    }

    .back {
      transform: rotateX(-180deg) translateZ(15px);
    }

    .right {
      transform: rotateY(90deg) translateZ(60px);
    }

    .left {
      transform: rotateY(-90deg) translateZ(60px);
    }

    .top {
      transform: rotateX(90deg) translateZ(135px);
    }

    .bottom {
      transform: rotateX(-90deg) translateZ(135px);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .monolith {
      animation: none; /* disabled for reduced motion */
    }
  }

  :global(.prefers-reduced-motion) .monolith {
    animation: none; /* disabled for reduced motion */
  }

  @keyframes spinX {
    from {
      transform: rotateX(0deg) rotateY(0deg);
    }
    to {
      transform: rotateX(360deg) rotateY(360deg);
    }
  }
</style>

<script is:inline>
  // Wait for GSAP to be ready
  /* Parallax JS */
  function initParallax() {
    window.gsapMatchMedia.add(
      {
        prefersReducedMotion: `(prefers-reduced-motion: reduce)`, // <- when ANY of these are true, the function below gets invoked
        noPreference: `(prefers-reduced-motion: no-preference)`,
        hasFinePointer: `(any-pointer: fine)`,
      },
      (context) => {
        let { noPreference, prefersReducedMotion, hasFinePointer } =
          context.conditions;
        let reduceMotion = window.reduceMotionCB?.checked || false; // if we weren't using a checkbox, we could just add another condition above: "(prefers-reduced-motion: reduce)"

        // Initialize parallax only if reduced motion is not preferred
        if (!reduceMotion && noPreference && hasFinePointer) {
          const sectionRoot = document.querySelector("#stars");
          if (!sectionRoot) return;
          if (prefersReducedMotion) return;

          const layers = Array.from(
            sectionRoot.querySelectorAll(".parallax-layer")
          );
          if (!layers.length) return;

          if (!window.gsap) return;
          const { gsap } = window;

          function parallaxIt(e, target, movement) {
            const rect = sectionRoot.getBoundingClientRect();
            const relX = e.clientX - rect.left;
            const relY = e.clientY - rect.top;

            gsap.to(target, {
              duration: 1,
              x: (relX - rect.width / 2) / rect.width * movement,
              y: (relY - rect.height / 2) / rect.height * movement,
              ease: "power2.out"
            });
          }

          function pointerMove(e) {
            layers.forEach(layer => {
              const fx = parseFloat(layer.getAttribute("data-parallax-factor") || "0");
              parallaxIt(e, layer, fx);
            });
          }

          sectionRoot.addEventListener("pointermove", pointerMove, {
            passive: true,
          });

          console.debug("GSAP parallax initiated.");

          // Return cleanup function
          return () => {
            sectionRoot.removeEventListener("pointermove", pointerMove);
            console.debug("GSAP parallax cleaned up.");
          };
        } else {
          // Reduced motion - no animation at all
          console.debug("prefers-reduced-motion (for parallax)");
        }

        // optionally return a cleanup function
        // return () => console.debug("cleanup");
      }
    );
  }

  // Listen for GSAP ready event
  document.addEventListener("gsap:ready", initParallax);

  // Fallback if GSAP is already loaded
  if (window.gsap) {
    initParallax();
  }
</script>
