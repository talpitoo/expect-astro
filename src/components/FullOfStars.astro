<section class="relative overflow-hidden" id="stars">
  <div
    class="moon-surface absolute inset-0 bg-[url('../img/moon-surface.webp?ver=28082025')] bg-bottom bg-no-repeat bg-[length:100%_auto] max-md:bg-[length:140%_auto] 2xl:bg-[center_300px]"
  >
    <!-- data-parallax-factor="5" data-parallax-factor-y="2" parallax-layer -->
  </div>

  <div class="container-bootstrap relative">
    <div class="grid md:grid-cols-12 -mx-[15px]">
      <div class="md:col-span-10 md:col-start-2 px-[15px]">
        <h2
          class="font-serif font-light leading-[1.1] mb-6 uppercase text-[46px]"
        >
          It's full of stars
        </h2>
        <p class="mb-3">
          Expect extraordinary taste, subtle details and sophisticated code.<br
          />
          <a href="#monolith" class="text-primary">Expect the unexpected.</a>
        </p>

        <a
          id="monolith"
          class="monolith-container parallax-layer block text-primary focus-visible:outline-0"
          data-parallax-factor="21"
          href="https://www.youtube.com/watch?v=ou6JNQwPWE0"
          rel="noopener noreferrer"
        >
          <div class="monolith show-front">
            <figure class="front bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure class="back bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure class="right bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure class="left bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure class="top bg-primary/50 block absolute outline-offset-0">
            </figure>
            <figure
              class="bottom bg-primary/50 block absolute outline-offset-0"
            >
            </figure>
          </div>
          <span class="sr-only">Monolith</span>
        </a>

        <div class="moonlanders -mb-4" data-speed="clamp(1.03)">
          <!-- data-parallax-factor="25" data-parallax-factor-y="15" parallax-layer -->
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Parallax targets (keep) */
  .parallax-layer {
    will-change: transform;
    backface-visibility: hidden;
    transform: translate3d(0, 0, 0);
  }

  .moonlanders {
    background: transparent url("../img/moonlanders.webp?ver=28082025") top left
      no-repeat;
    width: 525px;
    height: 300px;
    background-size: 100% 100%;
    position: absolute;
    bottom: -100px;
    right: 110px;
    z-index: 99;
    transform: translateZ(0);
    backface-visibility: hidden;
  }

  @media (min-width: 1200px) {
    .moonlanders {
      right: 130px;
    }
  }

  @media (min-width: 768px) and (max-width: 991px) {
    .moonlanders {
      right: 70px;
    }
  }

  @media (max-width: 767px) {
    .moonlanders {
      bottom: -40px;
      height: 200px;
      right: 50px;
      width: 350px;
    }
  }

  @media (max-width: 480px) {
    .moonlanders {
      bottom: -40px;
      height: 150px;
      right: 30px;
      width: 263px;
    }
  }

  /* monolith */
  .monolith-container {
    width: 120px;
    height: 270px;
    position: relative;
    perspective: 500px;
    margin-top: 50px;
  }

  .monolith {
    will-change: transform;
    animation: spinX 30s infinite linear;
    position: absolute;
    transform-style: preserve-3d;
    transition: transform 1s ease 0s;
    width: 100%;
    height: 100%;

    figure {
      backface-visibility: hidden;
      will-change: transform;
    }

    .front,
    .back {
      height: 270px;
      width: 120px;
    }

    .right,
    .left {
      height: 270px;
      left: 45px;
      width: 30px;
    }

    .top,
    .bottom {
      height: 30px;
      top: 120px;
      width: 120px;
    }

    .front {
      transform: rotateX(0deg) translateZ(15px);
    }

    .back {
      transform: rotateX(-180deg) translateZ(15px);
    }

    .right {
      transform: rotateY(90deg) translateZ(60px);
    }

    .left {
      transform: rotateY(-90deg) translateZ(60px);
    }

    .top {
      transform: rotateX(90deg) translateZ(135px);
    }

    .bottom {
      transform: rotateX(-90deg) translateZ(135px);
    }
  }

  @keyframes spinX {
    from {
      transform: rotateX(0deg) rotateY(0deg);
    }
    to {
      transform: rotateX(360deg) rotateY(360deg);
    }
  }
</style>

<script is:inline>
  /* Parallax JS unchanged (ensures we append transforms without nuking spin) */
  (function () {
    const root = document.querySelector("#stars");
    if (!root) return;
    if (matchMedia("(prefers-reduced-motion: reduce)").matches) return;

    const layers = Array.from(root.querySelectorAll(".parallax-layer"));
    if (!layers.length) return;

    const layerData = layers.map((el) => ({
      el,
      base: getComputedStyle(el).transform || "none",
      fx: parseFloat(el.getAttribute("data-parallax-factor") || "0"),
      fy: parseFloat(
        el.getAttribute("data-parallax-factor-y") ||
          el.getAttribute("data-parallax-factor") ||
          "0"
      ),
    }));

    let tx = 0,
      ty = 0;
    let cx = 0,
      cy = 0;
    let raf = 0;
    const ease = 0.08;

    function apply() {
      layerData.forEach((d) => {
        const base = d.base === "none" ? "" : d.base;
        d.el.style.transform = `${base} translate3d(${(cx * d.fx).toFixed(2)}px, ${(cy * d.fy).toFixed(2)}px, 0)`;
      });
    }

    function step() {
      const dx = tx - cx;
      const dy = ty - cy;
      if (Math.abs(dx) > 0.1 || Math.abs(dy) > 0.1) {
        cx += dx * ease;
        cy += dy * ease;
        apply();
        raf = requestAnimationFrame(step);
      } else {
        cx = tx;
        cy = ty;
        apply();
        raf = 0;
      }
    }

    function pointerMove(e) {
      const rect = root.getBoundingClientRect();
      const nx = (e.clientX - (rect.left + rect.width / 2)) / (rect.width / 2);
      const ny = (e.clientY - (rect.top + rect.height / 2)) / (rect.height / 2);
      tx = Math.max(-1, Math.min(1, nx));
      ty = Math.max(-1, Math.min(1, ny));
      if (!raf) raf = requestAnimationFrame(step);
    }

    // NOTE: keep parallax even on mobile
    // if (matchMedia("(pointer:fine)").matches) {
      window.addEventListener("pointermove", pointerMove, { passive: true });
    // } else {
    //   let t = 0;
    //   (function drift() {
    //     tx = Math.sin(t) * 0.4;
    //     ty = Math.cos(t * 0.6) * 0.3;
    //     if (!raf) raf = requestAnimationFrame(step);
    //     t += 0.01;
    //     requestAnimationFrame(drift);
    //   })();
    // }

    apply();
  })();
</script>
