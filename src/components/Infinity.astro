---
import BrandLogos from "./BrandLogos.astro";
import evaPod from "./icons/eva-pod.svg";
---

<section
  id="infinity"
  class="infinity text-center min-h-screen px-0 overflow-hidden relative"
>
  <div class="absolute inset-0 starfield-container">
    <BrandLogos />
  </div>
  <img
    id="eva-pod"
    src={evaPod.src}
    alt="Eva pod"
    class="size-10 lg:size-20 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
    width="80"
    height="80"
  />
  <!-- data-speed="0.5" -->

  <div class="container-bootstrap relative z-10"></div>
</section>

<style>
  .infinity {
    background-image: url("../img/infinity.webp?ver=28082025");
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
  }

  /* Starfield positioning */
  .starfield-container :global(img) {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.1);
    pointer-events: none;
  }
</style>

<script is:inline>
  let breakPointMd = 768;

  // Wait for GSAP to be ready
  function initGsapInfinity() {
    window.gsapMatchMedia.add(
      {
        prefersReducedMotion: `(prefers-reduced-motion: reduce)`, // <- when ANY of these are true, the function below gets invoked
        noPreference: `(prefers-reduced-motion: no-preference)`,
        isDesktop: `(min-width: ${breakPointMd}px)`,
        isMobile: `(max-width: ${breakPointMd - 1}px)`,
      },
      (context) => {
        let { noPreference, prefersReducedMotion, isDesktop, isMobile } = context.conditions;
        let reduceMotion = window.reduceMotionCB?.checked || false;
        const infinitySection = document.getElementById("infinity");
        if (!infinitySection) return;

        // Initialize GSAP only if reduced motion is not preferred
        if (!reduceMotion && noPreference) {
          if (!window.gsap) return;
          const { gsap } = window;

          // GSAP: EVA pod zoom in with section pinning
          const evaPod = document.getElementById("eva-pod");

          if (evaPod) {
            gsap.fromTo(
              evaPod,
              {
                scale: 10,
                opacity: 0,
              }, // Start very zoomed in (500%)
              {
                scale: 0.1, // Scale down to normal size
                opacity: 1,
                ease: "power1.out",
                scrollTrigger: {
                  trigger: infinitySection,
                  start: "top top", // When infinity section's top reaches viewport top
                  end: "+=100%", // Pin for the full height of the viewport
                  scrub: 1, // Smooth animation tied to scroll
                  pin: infinitySection, // Pin the entire infinity section
                  // markers: true // Remove in production
                },
              }
            );
            console.debug(
              "EVA pod animation initiated with infinity section pinning."
            );
          }

          // GSAP: starfield animation using brand logos
          const starfieldContainer = document.querySelector(
            ".starfield-container"
          );
          const logos = starfieldContainer
            ? Array.from(starfieldContainer.querySelectorAll("img"))
            : [];

          if (logos.length > 0) {
            // Calculate viewport dimensions for proper distance
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            const maxDistance = Math.max(viewportWidth, viewportHeight) * 0.8; // 80% of largest viewport dimension
            
            logos.forEach((logo, index) => {
              // Random initial position at center
              gsap.set(logo, {
                x: 0,
                y: 0,
                scale: 0.05 + Math.random() * 0.1, // Random small scale
              });

              // Calculate random direction for starfield movement
              const angle =
                (index / logos.length) * Math.PI * 2 + Math.random() * 0.5; // Spread evenly with some randomness
              // Distance based on viewport size to ensure stars reach section boundaries
              const distance = maxDistance + Math.random() * (maxDistance * 0.3); // 100-130% of max viewport dimension
              const endX = Math.cos(angle) * distance;
              const endY = Math.sin(angle) * distance;

              // Create infinite starfield animation
              const timelineStarfield = gsap.timeline({ repeat: -1 });
              const moveDuration = 5 + Math.random() * 4; // 5-9 seconds
              const restartOffset = moveDuration * 0.5; // Start next cycle when 50% through current movement
              
              // Spread initial delays evenly across the restart cycle to avoid initial blast
              const initialDelay = (index / logos.length) * restartOffset;

              timelineStarfield
                .fromTo(
                  logo,
                  {
                    x: 0,
                    y: 0,
                    scale: 0.05,
                  },
                  {
                    x: endX,
                    y: endY,
                    scale: 2 + Math.random() * 2.5,
                    duration: moveDuration,
                    ease: "cubic-bezier(0, 0, 0, 1)",
                    delay: initialDelay, // Evenly distributed delays based on index
                  }
                )
                .set(logo, {
                  x: 0,
                  y: 0,
                  scale: 0.05,
                  delay: -restartOffset, // Negative delay creates overlap for continuous effect
                });
            });

            console.debug("Starfield animation initiated.");
          }

          // Return cleanup function
          return () => {
            console.debug("GSAP EVA pod cleaned up.");
          };
        } else {
          // Reduced motion - hide EVA pod and clean up
          console.debug("prefers-reduced-motion (for GSAP EVA pod)");
        }

        // optionally return a cleanup function
        // return () => console.debug("cleanup");
      }
    );
  }

  // Listen for GSAP ready event
  document.addEventListener("gsap:ready", () => {
    initGsapInfinity();
  });

  // Fallback if GSAP is already loaded
  if (window.gsap) {
    initGsapInfinity();
  }
</script>
