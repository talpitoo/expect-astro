---
import IconPoole from "./icons/IconPoole.astro";
---

<section
  class="bg-black cursor-all-scroll relative overflow-hidden min-h-screen"
  id="intermission"
>
  <div id="discovery" class="absolute inset-10 top-auto">
    <img
      width="1782"
      height="239.15"
      src="img/shane-johnson-and-dennis-gonzales-2001exhibit.org-uss-discovery-one-xd-1-blueprint-starboard-profile-crop.png?ver=28082025"
      alt="Discovery"
      class="w-auto max-w-none h-[120px] lg:w-full lg:h-full object-contain absolute bottom-0 right-0 md:right-auto md:left-1/2 md:-translate-x-1/2 lg:static lg:translate-none"
    />
  </div>

  <div class="container-bootstrap relative min-h-[300px]">
    <div class="grid md:grid-cols-12 -mx-[15px]">
      <div class="md:col-span-10 md:col-start-2 px-[15px]">
        <h2
          class="font-serif font-light leading-[1.1] mb-6 uppercase text-[46px] text-white"
        >
          Inter<wbr />mission
        </h2>
        <p class="mb-6 text-white">
          Read my <a
            id="show-dialog-cv"
            href="https://cv.tothtamas.tt/"
            class="text-primary">freelancing manifesto</a
          > to see if we're a match.
        </p>
        <div class="cursor-follower" id="cursorFollower">
          <img
            src="img/eva-pod-cursor64x64.png?ver=28082025"
            alt="Eva Pod Cursor"
            class="w-full h-full object-contain"
          />
        </div>
      </div>
    </div>
    <div class="animation-placeholder">
      <div
        class="animation-spin absolute right-[100px] bottom-[50px] text-white"
      >
        <a
          class="aspect-square size-12 flex items-center justify-center cursor-grabbing"
          id="show-dialog-cv-with-delay"
          href="https://cv.tothtamas.tt/"
        >
          <IconPoole class="overflow-visible! size-12" />
        </a>
      </div>
    </div>
  </div>

  <!-- CV dialog -->
  <dialog
    id="cv-dialog"
    class="backdrop:bg-black/50 shadow-lg text-gray-light bg-white bg-clip-border backdrop-filter backdrop-blur-sm border border-white/10 rounded-lg p-6 w-full max-w-[calc(100vw-80px)] md:w-2xl fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
  >
    <div class="text-center">
      <h3 class="text-gray-darker text-lg font-semibold mb-4">https://cv.tothtamas.tt/</h3>
      <div class="mb-6 dark:text-white">
        <iframe
          class="w-full aspect-video focus-visible:outline-none"
          src="https://cv.tothtamas.tt/"
          title="A freelancing manifesTTo"
          frameborder="0"
          referrerpolicy="strict-origin-when-cross-origin"
          sandbox="allow-same-origin allow-scripts"
          allowfullscreen></iframe>
      </div>
      <button
        id="close-dialog-cv"
        class="bg-primary text-white px-4 py-2 rounded hover:bg-primary/80 transition-colors
        focus-visible:outline-primary focus-visible:outline-dashed focus-visible:outline-2 focus-visible:outline-offset-2"
      >
        Close
      </button>
    </div>
  </dialog>
</section>

<style>
  .cursor-follower {
    position: absolute;
    pointer-events: none;
    width: 64px;
    height: 64px;
    transition: opacity 0.5s;
  }

  @media (hover: none),
    (any-hover: none),
    (pointer: coarse),
    (any-pointer: coarse) {
    .cursor-follower {
      display: none !important;
    }
  }

  /* Hide cursor follower when hovering over grabbing cursor elements */
  a:hover ~ .cursor-follower,
  #intermission:has(a:hover) .cursor-follower {
    opacity: 0 !important;
  }

  .animation-placeholder a,
  .animation-placeholder a:active,
  .animation-placeholder a:focus,
  .animation-placeholder a:hover {
    color: white;
  }

  /* Dr. Frank Poole */
  .animation-placeholder {
    a {
      &,
      &:active,
      &:focus,
      &:hover {
        color: white;
        border-radius: 100%;
        outline-offset: 10px;
      }
    }
  }

  .animation-spin {
    animation: spinZ 4s infinite linear;
  }

  .animation-flyoff a {
    animation: enlarge 2s 1 cubic-bezier(1, 0, 1, 0) forwards;
  }

  @media (prefers-reduced-motion: reduce) {
    .animation-spin,
    .animation-flyoff a {
      animation-duration: 20s; /* Much slower for reduced motion */
    }
  }

  :global(.prefers-reduced-motion) .animation-spin,
  :global(.prefers-reduced-motion) .animation-flyoff a {
    animation-duration: 20s; /* Much slower for reduced motion */
  }

  @keyframes spinX {
    0% {
      transform: rotateX(0deg);
    }

    100% {
      transform: rotateX(180deg);
    }
  }

  @keyframes spinZ {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes enlarge {
    0% {
      transform: scale(1);
    }

    100% {
      transform: scale(62.5);
    }
  }
</style>

<script is:inline>
  // Dr. Frank Poole
  const animationPlaceholder = document.querySelector(".animation-placeholder");
  if (animationPlaceholder) {
    animationPlaceholder.addEventListener("click", function () {
      this.classList.add("animation-flyoff");
      setTimeout(function () {
        console.debug(
          "setTimeout branch executed for Dr. Frank Poole animation"
        );
        const placeholder = document.querySelector(".animation-placeholder");
        if (placeholder) {
          placeholder.classList.remove("animation-flyoff");
          placeholder.style.display = "none";
        }
      }, 1982);
      if (
        typeof ga !== "undefined" &&
        ga.hasOwnProperty("loaded") &&
        ga.loaded === true
      ) {
        ga("send", "event", "button", "click", "Dr. Frank Poole");
      }
    });
  }
</script>

<script is:inline>
  // Wait for GSAP to be ready
  function initGsapIntermission() {
    window.gsapMatchMedia.add(
      {
        prefersReducedMotion: `(prefers-reduced-motion: reduce)`, // <- when ANY of these are true, the function below gets invoked
        noPreference: `(prefers-reduced-motion: no-preference)`,
        canHover: `(any-hover: hover)`,
        hasFinePointer: `(any-pointer: fine)`,
      },
      (context) => {
        let { noPreference, prefersReducedMotion, canHover, hasFinePointer } =
          context.conditions;
        let reduceMotion = window.reduceMotionCB?.checked || false;
        const intermissionSection = document.getElementById("intermission");
        if (!intermissionSection) return;

        // Initialize GSAP only if reduced motion is not preferred
        if (!reduceMotion && noPreference) {
          if (!window.gsap) return;
          const { gsap } = window;

          // GSAP: Cursor follower
          if (canHover && hasFinePointer) {
            // Use the element directly and center via xPercent/yPercent (no CSS changes)
            const follower = document.getElementById("cursorFollower");
            if (!follower) return;

            // Ensure consistent positioning model independent of initial static position
            gsap.set(follower, {
              position: "absolute",
              left: 0,
              top: 0,
              xPercent: -50,
              yPercent: -50,
            });

            // Coordinates must be relative to the same containing block the absolute element uses
            const getContainerRect = () => {
              const container =
                /** @type {HTMLElement|null} */ (follower.offsetParent) ||
                intermissionSection;
              return container.getBoundingClientRect();
            };

            // Smooth lag while moving
            const xTo = gsap.quickTo(follower, "x", {
              duration: 0.6,
              ease: "power1.out",
            });
            const yTo = gsap.quickTo(follower, "y", {
              duration: 0.6,
              ease: "power1.out",
            });

            // Track mouse only inside the intermission section
            function pointerMove(e) {
              const rect = getContainerRect();
              // With xPercent/yPercent = -50, x/y should be the raw cursor position in the container's coordinate space
              const targetX = e.clientX - rect.left;
              const targetY = e.clientY - rect.top;

              // Lag follow
              xTo(targetX);
              yTo(targetY);
            }

            intermissionSection.addEventListener("mousemove", pointerMove);
            console.debug("GSAP cursor follower was initiated.");
          }

          // GSAP: Horizontal movement for the Discovery spaceship (runs independently)
          const discovery = document.getElementById("discovery");

          if (discovery) {
            gsap.fromTo(
              discovery,
              { x: "-3vw" }, // Start position
              {
                x: "3vw", // Move to right edge of viewport
                ease: "none",
                scrollTrigger: {
                  trigger: discovery,
                  start: "top bottom", // When div's top reaches viewport bottom
                  end: "bottom top", // When div's bottom reaches viewport top
                  scrub: 2, // Smooth animation tied to scroll
                  // markers: true // Remove in production
                },
              }
            );
            console.debug("Discovery horizontal movement initiated.");
          }

          // Return cleanup function
          return () => {
            intermissionSection.removeEventListener("mousemove", pointerMove);
            console.debug("GSAP cursor follower cleaned up.");
          };
        } else {
          // Reduced motion - hide cursor follower and clean up
          console.debug("prefers-reduced-motion (for GSAP cursor follower)");
        }

        // optionally return a cleanup function
        // return () => console.debug("cleanup");
      }
    );
  }

  // Listen for GSAP ready event
  document.addEventListener("gsap:ready", () => {
    initGsapIntermission();
  });

  // Fallback if GSAP is already loaded
  if (window.gsap) {
    initGsapIntermission();
  }
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const dialogCv = document.getElementById("cv-dialog") as HTMLDialogElement;
    const closeButtonCv = document.getElementById("close-dialog-cv");
    const showButtonCv = document.getElementById("show-dialog-cv");
    const showButtonCvWithDelay = document.getElementById(
      "show-dialog-cv-with-delay"
    );
    const poole = document.querySelector(".animation-placeholder");
    const pooleVisible = poole?.style.display !== "none";

    if (showButtonCvWithDelay && showButtonCv && dialogCv && closeButtonCv) {
      // "Show the dialog" button opens the dialog modally
      showButtonCv.addEventListener("click", (e) => {
        e.preventDefault();
        dialogCv.showModal();
      });

      // show the CV dialog with delay, after Poole flies off
      showButtonCvWithDelay.addEventListener("click", (e) => {
        e.preventDefault();
        
        if (pooleVisible) {
          poole.classList.add("animation-flyoff");
          setTimeout(function () {
            poole.classList.remove("animation-flyoff");
            poole.style.display = "none";
            dialogCv.showModal();
          }, 1982);
        } else {
          dialogCv.showModal();
        }
      });

      // Close dialogCv when close button is clicked
      closeButtonCv.addEventListener("click", function () {
        dialogCv.close();
      });

      // Close dialogCv when clicking outside (backdrop)
      dialogCv.addEventListener("click", function (e) {
        if (e.target === dialogCv) {
          dialogCv.close();
        }
      });
    }
  });
</script>
