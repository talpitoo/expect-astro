---
import IconPoole from "./icons/IconPoole.astro";
---

<section class="bg-black cursor-all-scroll relative overflow-hidden min-h-screen" id="intermission">
  <div class="absolute inset-10 top-auto">
    <img src="img/discovery-crop-transparent.png?ver=28082025" alt="Discovery" class="w-full h-full object-contain object-center" />
  </div>

  <div class="container-bootstrap relative min-h-[300px]">
    <div class="grid md:grid-cols-12 -mx-[15px]">
      <div class="md:col-span-10 md:col-start-2 px-[15px]">
        <h2
          class="font-serif font-light leading-[1.1] mb-6 uppercase text-[46px] text-white"
        >
          Inter<wbr />mission
        </h2>
        <p class="mb-6 text-white">
          Read my <a
            onclick="trackOutboundLinkWithDelay('https://cv.tothtamas.tt/'); return false;"
            href="https://cv.tothtamas.tt/"
            class="text-primary">freelancing manifesto</a
          > to see if we're a match.
        </p>
        <div class="cursor-follower" id="cursorFollower">
          <img
            src="img/eva-pod-cursor64x64.png?ver=28082025"
            alt="Eva Pod Cursor"
            class="w-full h-full object-contain"
          />
        </div>
      </div>
    </div>
    <div class="animation-placeholder">
      <div
        class="animation-spin absolute right-[100px] bottom-[50px] text-white"
      >
        <a
          class="aspect-square size-12 flex items-center justify-center cursor-grabbing"
          onclick="trackOutboundLinkWithDelay('https://cv.tothtamas.tt/'); return false;"
          href="https://cv.tothtamas.tt/"
        >
          <IconPoole class="overflow-visible! size-12" />
        </a>
      </div>
    </div>
  </div>
</section>

<style>
  .cursor-follower {
    position: absolute;
    pointer-events: none;
    width: 64px;
    height: 64px;
    transition: opacity 0.5s;
  }

  @media (hover: none),
    (any-hover: none),
    (pointer: coarse),
    (any-pointer: coarse) {
    .cursor-follower {
      display: none !important;
    }
  }

  /* Hide cursor follower when hovering over grabbing cursor elements */
  a:hover ~ .cursor-follower,
  #intermission:has(a:hover) .cursor-follower {
    opacity: 0 !important;
  }

  .animation-placeholder a,
  .animation-placeholder a:active,
  .animation-placeholder a:focus,
  .animation-placeholder a:hover {
    color: white;
  }

  /* Dr. Frank Poole */
  .animation-placeholder {
    a {
      &,
      &:active,
      &:focus,
      &:hover {
        color: white;
        border-radius: 100%;
        outline-offset: 10px;
      }
    }
  }

  .animation-spin {
    animation: spinZ 4s infinite linear;
  }

  .animation-flyoff a {
    animation: enlarge 2s 1 cubic-bezier(1, 0, 1, 0) forwards;
  }

  @media (prefers-reduced-motion: reduce) {
    .animation-spin,
    .animation-flyoff a {
      animation-duration: 20s; /* Much slower for reduced motion */
    }
  }

  :global(.prefers-reduced-motion) .animation-spin,
  :global(.prefers-reduced-motion) .animation-flyoff a {
    animation-duration: 20s; /* Much slower for reduced motion */
  }

  @keyframes spinX {
    0% {
      transform: rotateX(0deg);
    }

    100% {
      transform: rotateX(180deg);
    }
  }

  @keyframes spinZ {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes enlarge {
    0% {
      transform: scale(1);
    }

    100% {
      transform: scale(62.5);
    }
  }
</style>

<script is:inline>
  // Dr. Frank Poole
  const animationPlaceholder = document.querySelector(".animation-placeholder");
  if (animationPlaceholder) {
    animationPlaceholder.addEventListener("click", function () {
      this.classList.add("animation-flyoff");
      setTimeout(function () {
        console.debug(
          "setTimeout branch executed for Dr. Frank Poole animation"
        );
        const placeholder = document.querySelector(".animation-placeholder");
        if (placeholder) {
          placeholder.classList.remove("animation-flyoff");
          placeholder.style.display = "none";
        }
      }, 1982);
      if (
        typeof ga !== "undefined" &&
        ga.hasOwnProperty("loaded") &&
        ga.loaded === true
      ) {
        ga("send", "event", "button", "click", "Dr. Frank Poole");
      }
    });
  }
</script>

<script is:inline>
  // Wait for GSAP to be ready
  function initCursorFollower() {
    window.gsapMatchMedia.add(
      {
        prefersReducedMotion: `(prefers-reduced-motion: reduce)`, // <- when ANY of these are true, the function below gets invoked
        noPreference: `(prefers-reduced-motion: no-preference)`,
        canHover: `(any-hover: hover)`,
        hasFinePointer: `(any-pointer: fine)`,
      },
      (context) => {
        let { noPreference, prefersReducedMotion, canHover, hasFinePointer } =
          context.conditions;
        let reduceMotion = window.reduceMotionCB?.checked || false;

        // Initialize cursor follower only if reduced motion is not preferred
        if (!reduceMotion && noPreference) {
          if (!(canHover && hasFinePointer)) return;

          if (!window.gsap) return;

          const { gsap } = window;

          // NOTE: optional pin syntax
          // let st = window.ScrollTrigger.create({
          //   trigger: "#intermission",
          //   pin: "[data-pin]",
          //   start: 'top top', // when the top of the trigger hits the top of the viewport
          //   // end: "bottom-=100 top",
          //   // pinSpacing: false, // If the pin duration (distance between start and end) is smaller than the triggerâ€™s height, ScrollTrigger will extend the pin to cover the full height, unless you tell it otherwise.
          //   // end: () => "bottom-=" + 100 + " top", // dynamically offset
          //   endTrigger: "[data-pin]",
          //   end: "bottom top-=140", // Ends 140px before the section's bottom reaches viewport top
          //   // markers: true
          // });

          const intermissionSection = document.getElementById("intermission");

          if (!intermissionSection) return;

          // Use the element directly and center via xPercent/yPercent (no CSS changes)
          const follower = document.getElementById("cursorFollower");
          if (!follower) return;

          // Ensure consistent positioning model independent of initial static position
          gsap.set(follower, {
            position: "absolute",
            left: 0,
            top: 0,
            xPercent: -50,
            yPercent: -50,
          });

          // Coordinates must be relative to the same containing block the absolute element uses
          const getContainerRect = () => {
            const container =
              /** @type {HTMLElement|null} */ (follower.offsetParent) ||
              intermissionSection;
            return container.getBoundingClientRect();
          };

          // Smooth lag while moving
          const xTo = gsap.quickTo(follower, "x", {
            duration: 0.6,
            ease: "power1.out",
          });
          const yTo = gsap.quickTo(follower, "y", {
            duration: 0.6,
            ease: "power1.out",
          });

          // Track mouse only inside the intermission section
          function pointerMove(e) {
            const rect = getContainerRect();
            // With xPercent/yPercent = -50, x/y should be the raw cursor position in the container's coordinate space
            const targetX = e.clientX - rect.left;
            const targetY = e.clientY - rect.top;

            // Lag follow
            xTo(targetX);
            yTo(targetY);
          }

          intermissionSection.addEventListener("mousemove", pointerMove);
          console.debug("GSAP cursor follower was initiated.");

          // Return cleanup function
          return () => {
            intermissionSection.removeEventListener("mousemove", pointerMove);
            console.debug("GSAP cursor follower cleaned up.");
          };
        } else {
          // Reduced motion - hide cursor follower and clean up
          console.debug("prefers-reduced-motion (for GSAP cursor follower)");
        }

        // optionally return a cleanup function
        // return () => console.debug("cleanup");
      }
    );
  }

  // Listen for GSAP ready event
  document.addEventListener("gsap:ready", initCursorFollower);

  // Fallback if GSAP is already loaded
  if (window.gsap) {
    initCursorFollower();
  }
</script>
