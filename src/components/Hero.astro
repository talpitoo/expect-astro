---
import AccentColorPicker from "./AccentColorPicker.astro";
import DarkModeToggle from "./DarkModeToggle.astro";

// import { Image } from 'astro:assets';
// import stanleyKubrick2001SpaceOdysseyLowQuality from '../assets/stanley-kubrick-2001-space-odyssey-low-quality.jpg';
// <Image src={stanleyKubrick2001SpaceOdysseyLowQuality} priority quality="mid" alt="2001: A Space Odyssey" class="space-odyssey" />
---

<header id="top">
  <img
    src="img/stanley-kubrick-2001-space-odyssey-low-quality.jpg?ver=28082025"
    alt="2001: A Space Odyssey"
    class="space-odyssey absolute top-0 left-1/2 -translate-x-1/2 w-auto h-full object-cover min-[1500px]:w-full min-[1500px]:h-auto"
    fetchpriority="high"
  />
  <div
    id="linear-gradient"
    class="absolute inset-0 bg-gradient-to-r from-black/50 to-transparent accent:bg-gradient-to-r accent:from-primary accent:to-primary accent:mix-blend-hue"
  >
  </div>
  <img
    src="img/stanley-kubrick-2001-space-odyssey-mask.webp?ver=28082025"
    alt="2001: A Space Odyssey"
    class="space-odyssey-mask hidden accent:block absolute top-0 left-1/2 -translate-x-1/2 w-auto h-full object-cover min-[1500px]:w-full min-[1500px]:h-auto"
    loading="lazy"
    fetchpriority="low"
    decoding="async"
  />
  <img
    src="img/logo-expect.png?ver=28082025"
    alt="Expect"
    width="300"
    height="150"
    class="relative z-10 mt-[15px] -ml-11 md:-ml-10"
    fetchpriority="high"
  />
  <div class="stripe">
    <h1
      class="font-sans font-bold not-italic text-[65px] mt-0 mb-2.5 leading-[1.1] max-md:text-[50px] max-sm:text-[32px]"
    >
      Web development
    </h1>
    <a
      href="https://www.imdb.com/title/tt0062622/quotes"
      rel="noopener noreferrer"
    >
      <q cite="https://www.imdb.com/title/tt0062622/quotes"
        >I'm sorry Dave, I'm afraid I can't do that</q
      >
    </a>
  </div>
  <div class="absolute bottom-4 right-4 z-50 flex flex-col gap-4">
    <DarkModeToggle client:load />
    <div
      class="flex gap-0.5 rounded-full p-1 text-white bg-white/10 bg-clip-border backdrop-filter backdrop-blur-sm border border-white/10 shadow"
    >
      <AccentColorPicker client:load />
    </div>
  </div>
</header>

<style>
  header {
    background-color: var(--color-gray);
    color: white;
    padding: 0 var(--spacing-header) 100px;
    text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);
    position: relative;
    overflow: hidden;
  }

  header q {
    font-style: italic;
    font-size: 25px; /* ~25px */
  }

  @media (max-width: 767px) {
    header q {
      font-size: 20px; /* ~20px */
    }
  }

  @media (max-width: 320px) {
    header q {
      font-size: 18px; /* ~18px */
    }
  }

  header .stripe {
    margin-top: 250px;
    border-left: 15px solid rgba(255, 255, 255, 0.2);
    margin-left: calc(var(--spacing-header) * -1);
    padding: 20px 20px 20px var(--spacing-header);
    position: relative;
    z-index: 1;
  }

  @media (max-width: 767px) {
    header .stripe {
      margin-top: 15px;
      padding: 15px 20px 15px 42px;
    }
  }

  @media (max-width: 320px) {
    header .stripe {
      padding: 15px 20px 15px 32px;
    }
  }

  @media (max-width: 767px) {
    header {
      padding: 0 var(--spacing-header) var(--spacing-header);
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }

  header,
  header h1,
  header q,
  header .stripe,
  header .linear-gradient,
  header img,
  .space-odyssey,
  .space-odyssey-mask {
    will-change: transform;
    transform: translateZ(0);
    /* backface-visibility: hidden; */
  }
</style>

<script>
  // Cross-browser parallax that works on desktop and mobile
  function initParallax() {
    const spaceOdyssey = document.querySelector(".space-odyssey") as HTMLElement;
    const spaceOdysseyMask = document.querySelector(".space-odyssey-mask") as HTMLElement;
    const factor = 1.5;

    if (!spaceOdyssey && !spaceOdysseyMask) return;

    let ticking = false;

    function updateParallax() {
      const scrollY =
        window.pageYOffset || document.documentElement.scrollTop || 0;
      const offset = Math.floor(scrollY / factor);

      if (spaceOdyssey) {
        spaceOdyssey.style.transform = `translate3d(0, calc(${offset}px), 0)`;
      }
      if (spaceOdysseyMask) {
        spaceOdysseyMask.style.transform = `translate3d(0, calc(${offset}px), 0)`;
      }

      ticking = false;
    }

    function requestParallaxUpdate() {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
      }
    }

    // Initial call
    updateParallax();

    // Event listeners with passive scrolling
    window.addEventListener("scroll", requestParallaxUpdate, { passive: true });
    window.addEventListener("resize", updateParallax, { passive: true });
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initParallax);
  } else {
    initParallax();
  }
</script>
