---
import evaPod from "./icons/eva-pod.svg";
---

<section
  id="infinity"
  class="infinity text-center min-h-screen px-0 overflow-hidden relative"
>
  <!-- Canvas for starfield + logos -->
  <canvas id="starfield-canvas" class="absolute inset-0 w-full h-full"></canvas>

  <!-- Centerpiece pod stays as normal DOM -->
  <img
    id="eva-pod"
    src={evaPod.src}
    alt="Eva pod"
    class="size-10 lg:size-20 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
    width="80"
    height="80"
  />

  <div class="container-bootstrap relative z-10"></div>
</section>

<style>
  .infinity {
    background-image: url("../img/infinity.webp?ver=28082025");
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
  }

  /* Keep your brand-logo sizing if you still want CSS-based scaling */
  .brand-logo {
    width: auto;
    height: 16px;
  }

  @media (min-width: 768px) {
    .brand-logo {
      height: 32px;
    }
  }

  .brand-mark {
    width: auto;
    height: 32px;
  }

  @media (min-width: 768px) {
    .brand-mark {
      height: 64px;
    }
  }
</style>

<script is:inline>
  const logos = [
    // 11ty
  {
    name: "11ty",
    src: "img/logos/11ty-mark.svg",
    type: "mark",
    speed: 1.05,
    size: 64,
  },

  // Adobe
  {
    name: "Adobe Photoshop CC",
    src: "img/logos/adobe-photoshop-cc-mark-color.svg",
    type: "mark",
    speed: 1.3,
    size: 64,
  },

  // Alpine.js
  {
    name: "Alpine.js",
    src: "img/logos/alpine-color.svg",
    type: "logo",
    speed: 1.5,
    size: 32,
  },

  // Astro
  {
    name: "Astro",
    src: "img/logos/astro-color.svg",
    type: "logo",
    speed: 1.2,
    size: "brand-logo md:h-14!",
  },

  // Atlassian
  {
    name: "Atlassian",
    src: "img/logos/atlassian-color.svg",
    type: "logo",
    speed: 2,
    size: 32,
  },
  //   { name: "Atlassian", src: "img/logos/atlassian-mark-color.svg", type: "mark", speed: 1.9, size: "brand-mark" },

  // AWS
  {
    name: "AWS",
    src: "img/logos/aws-mark-color.svg",
    type: "mark",
    speed: 1.2,
    size: 64,
  },

  // Blitz.js
  //   { name: "Blitz.js", src: "img/logos/blitzjs.svg", type: "logo", speed: 1.4, size: "brand-logo" },

  // Bootstrap
  {
    name: "Bootstrap",
    src: "img/logos/bootstrap-mark-color.svg",
    type: "mark",
    speed: 1.025,
    size: 64,
  },

  // Chart.js
  {
    name: "Chart.js",
    src: "img/logos/chartjs-color.svg",
    type: "mark",
    speed: 1.2,
    size: 64,
  },
  //   { name: "Chart.js", src: "img/logos/chartjs-mark-color.svg", type: "mark", speed: 1.15, size: "brand-mark" },

  // ChatGPT
  {
    name: "ChatGPT",
    src: "img/logos/chat-gpt-mark.svg",
    type: "mark",
    speed: 1.4,
    size: 64,
  },

  // CSS3
  {
    name: "CSS3",
    src: "img/logos/css3-mark-color.svg",
    type: "mark",
    speed: 1.2,
    size: 64,
  },
  //   { name: "CSS", src: "img/logos/css-mark-color.svg", type: "mark", speed: 1.1, size: "brand-mark" },

  // Docker
  {
    name: "Docker",
    src: "img/logos/docker-color.svg",
    type: "logo",
    speed: 1.4,
    size: 32,
  },
  //   { name: "Docker", src: "img/logos/docker-mark-color.svg", type: "mark", speed: 1.3, size: "brand-mark" },
    // â€¦ add more
  ];

  let breakPointMd = 768;

  function initGsapInfinity() {
    window.gsapMatchMedia.add(
      {
        prefersReducedMotion: `(prefers-reduced-motion: reduce)`,
        noPreference: `(prefers-reduced-motion: no-preference)`,
        isDesktop: `(min-width: ${breakPointMd}px)`,
        isMobile: `(max-width: ${breakPointMd - 1}px)`,
        hasFinePointer: `(any-pointer: fine)`,
      },
      (context) => {
        let { noPreference, isDesktop, hasFinePointer } = context.conditions;
        let reduceMotion = window.reduceMotionCB?.checked || false;
        const infinitySection = document.getElementById("infinity");
        if (!infinitySection) return;

        if (!reduceMotion && noPreference) {
          if (!window.gsap) return;
          const { gsap } = window;

          // EVA pod animation stays the same
          const evaPod = document.getElementById("eva-pod");
          if (evaPod) {
            gsap.fromTo(
              evaPod,
              { scale: 10, opacity: 0 },
              {
                scale: 0.1,
                opacity: 1,
                ease: "power1.out",
                scrollTrigger: {
                  trigger: infinitySection,
                  start: "top top",
                  end: "+=100%",
                  scrub: 1,
                  pin: hasFinePointer && isDesktop ? infinitySection : false,
                },
              }
            );
          }

          // Canvas-based starfield instead of DOM logos
          const canvas = document.getElementById("starfield-canvas");
          const ctx = canvas.getContext("2d");

          function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
          }
          window.addEventListener("resize", resizeCanvas);
          resizeCanvas();

          class Logo {
            constructor({ src, speed, size }) {
              this.img = new Image();
              this.img.src = src;
              this.speed = speed;
              this.size = size;
              this.reset();
            }
            reset() {
              this.angle = Math.random() * Math.PI * 2;
              this.radius = 0;
            }
            update() {
              this.radius += this.speed * 2; // tune multiplier for speed
              const maxR = Math.sqrt(
                canvas.width * canvas.width + canvas.height * canvas.height
              );
              if (this.radius > maxR) this.reset();
            }
            draw() {
              const x = canvas.width / 2 + Math.cos(this.angle) * this.radius;
              const y = canvas.height / 2 + Math.sin(this.angle) * this.radius;
              ctx.drawImage(
                this.img,
                x - this.size / 2,
                y - this.size / 2,
                this.size,
                this.size
              );
            }
          }

          const logoObjs = logos.map((l) => new Logo(l));

          function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            for (const logo of logoObjs) {
              logo.update();
              if (logo.img.complete) logo.draw();
            }
            requestAnimationFrame(animate);
          }
          animate();

          console.debug("Canvas starfield initiated.");
        } else {
          console.debug("prefers-reduced-motion (canvas starfield skipped)");
        }
      }
    );
  }

  document.addEventListener("gsap:ready", () => initGsapInfinity());
  if (window.gsap) initGsapInfinity();
</script>
